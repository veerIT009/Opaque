{"version":3,"file":"js/chunks/863.js","mappings":"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","sources":["webpack:///./resources/pos/src/member/components/auth/ForgotPassword.js","webpack:///./resources/pos/src/member/components/auth/loginFormValidate.js","webpack:///./resources/pos/src/member/config/apiConfigWithoutToken.js","webpack:///./resources/pos/src/member/store/actions/authAction.js"],"sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Card, CardBody, Col, Container, Form, Row } from \"reactstrap\";\r\nimport loginFormValidate from \"./loginFormValidate\";\r\nimport { environment } from \"../../../environment\";\r\nimport { Routes } from \"../../constants/index\";\r\nimport HeaderTitle from \"../../../shared/header-title/HeaderTitle\";\r\nimport CustomInputGroup from \"../../../shared/components/CustomInputGroup\";\r\nimport {\r\n    getCurrentMember,\r\n    getFormattedMessage,\r\n} from \"../../../shared/sharedMethod\";\r\nimport { forgotPassword } from \"../../store/actions/authAction\";\r\nimport Header from \"../../../components/newMemberApp/Header\";\r\nimport Footer from \"../../../components/newMemberApp/Footer\";\r\n\r\nconst MemberForgotPassword = (props) => {\r\n    const { handleSubmit, invalid, isSubmitted, forgotPassword } = props;\r\n\r\n    const onSubmit = (formValues) => {\r\n        formValues.url = environment.URL + \"/#\" + Routes.MEMBER_RESET_PASSWORD;\r\n        forgotPassword(formValues);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"login-form flex-row align-items-center\">\r\n                <HeaderTitle title=\"Forgot Password\" />\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md=\"6\" xs=\"12\">\r\n                            <Card className=\"p-3\">\r\n                                <CardBody>\r\n                                    {!isSubmitted ? (\r\n                                        <Form onSubmit={handleSubmit(onSubmit)}>\r\n                                            <h2>\r\n                                                {getFormattedMessage(\r\n                                                    \"forgot-password.title\"\r\n                                                )}\r\n                                            </h2>\r\n                                            <p className=\"text-muted\">\r\n                                                {getFormattedMessage(\r\n                                                    \"forgot-password.note\"\r\n                                                )}\r\n                                            </p>\r\n                                            <Field\r\n                                                name=\"email\"\r\n                                                type=\"email\"\r\n                                                placeholder=\"profile.input.email.label\"\r\n                                                groupText=\"icon-envelope\"\r\n                                                component={CustomInputGroup}\r\n                                            />\r\n                                            <div className=\"d-flex justify-content-center\">\r\n                                                <Row>\r\n                                                    <Col className=\"mt-2 d-flex justify-content-end\">\r\n                                                        <Button\r\n                                                            color=\"\"\r\n                                                            disabled={invalid}\r\n                                                            className=\"frontend-btn\"\r\n                                                        >\r\n                                                            <span>\r\n                                                                {\" \"}\r\n                                                                {getFormattedMessage(\r\n                                                                    \"global.input.submit-btn.label\"\r\n                                                                )}\r\n                                                            </span>\r\n                                                        </Button>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </div>\r\n                                            <div className=\"d-flex justify-content-center login_links\">\r\n                                                <Link\r\n                                                    to={Routes.MEMBER_LOGIN}\r\n                                                    className=\"px-0 mt-2 text-right text-decoration-none\"\r\n                                                >\r\n                                                    {getFormattedMessage(\r\n                                                        \"global.input.cancel-btn.label\"\r\n                                                    )}\r\n                                                </Link>\r\n                                            </div>\r\n                                        </Form>\r\n                                    ) : (\r\n                                        <div>\r\n                                            <div className=\"text-center login_links\">\r\n                                                <p>\r\n                                                    {getFormattedMessage(\r\n                                                        \"forgot-password.email.note\"\r\n                                                    )}\r\n                                                </p>\r\n                                                <Link\r\n                                                    to={Routes.MEMBER_LOGIN}\r\n                                                    color=\"link\"\r\n                                                >\r\n                                                    {getFormattedMessage(\r\n                                                        \"forgot-password.link.go-back.title\"\r\n                                                    )}\r\n                                                </Link>\r\n                                            </div>\r\n                                        </div>\r\n                                    )}\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    );\r\n};\r\n\r\nMemberForgotPassword.propTypes = {\r\n    invalid: PropTypes.bool,\r\n    isSubmitted: PropTypes.bool,\r\n    forgotPassword: PropTypes.func,\r\n    handleSubmit: PropTypes.func,\r\n};\r\n\r\nconst form = reduxForm({\r\n    form: \"forgotPasswordForm\",\r\n    validate: loginFormValidate,\r\n})(MemberForgotPassword);\r\nconst mapStateToProps = (state) => {\r\n    return { isSubmitted: !!state.auth.isSubmitted };\r\n};\r\n\r\nexport default connect(mapStateToProps, { forgotPassword })(form);\r\n","import { getFormattedMessage } from \"../../../shared/sharedMethod\";\r\n\r\nexport default (formValues) => {\r\n    const errors = {};\r\n    if (!formValues.email) {\r\n        errors.email = getFormattedMessage(\r\n            \"profile.input.email-required.validate.label\"\r\n        );\r\n    }\r\n    const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\r\n    if (!regex.test(formValues.email)) {\r\n        // errors.email = 'Invalid email address !'\r\n    }\r\n    if (!formValues.password) {\r\n        errors.password = getFormattedMessage(\r\n            \"profile.input.password-required.validate.label\"\r\n        );\r\n    }\r\n    if (formValues.password && formValues.password.length < 8) {\r\n        errors.password = getFormattedMessage(\r\n            \"profile.input.password-invalid.validate.label\"\r\n        );\r\n    }\r\n    if (formValues.confirm_password !== formValues.password) {\r\n        errors.confirm_password = getFormattedMessage(\r\n            \"profile.input.confirm-password.validate.label\"\r\n        );\r\n    }\r\n    return errors;\r\n};\r\n","import axios from \"axios\";\r\nimport axiosInterceptor from \"./axiosInterceptor\";\r\nimport { environment } from \"../../environment\";\r\n\r\nconst wampServer = environment.URL + \"/api\";\r\n\r\n\r\nconst axiosApi = axios.create({\r\n    baseURL: wampServer,\r\n});\r\naxiosInterceptor.setupInterceptors(axiosApi, true, false);\r\nexport default axiosApi;\r\n","import { authActionType, toastType } from \"../../constants/index\";\r\nimport apiConfig from \"../../config/apiConfigWithoutToken\";\r\nimport apiConfigWithRoot from \"../../config/apiConfigwithoutTokenWithRoot\";\r\nimport { addToast } from \"../../../store/action/toastAction\";\r\nimport { getFormattedMessage } from \"../../../shared/sharedMethod\";\r\nimport {\r\n    apiBaseURL,\r\n    LocalStorageKey,\r\n    loggedConstant,\r\n    Routes,\r\n    Tokens,\r\n} from \"../../constants/index\";\r\nimport { setUserProfile } from \"../../../store/action/localStorageAction\";\r\nimport { getLocalStorageDataByEncryptKey } from \"../../../shared/sharedMethod\";\r\nimport { setLoading } from \"../../../store/action/progressBarAction\";\r\n\r\nexport const login = (user, navigate) => async (dispatch) => {\r\n    localStorage.setItem(\"isMemberLogout\", false);\r\n    const { email, password } = user;\r\n    await apiConfig\r\n        .post(apiBaseURL.MEMBER_LOGIN, { email, password })\r\n        .then((response) => {\r\n            if (response) {\r\n                // console.log(localStorage.getItem(\"isReset\"));\r\n                if (!response.data.data.user.membership_plan_name) {\r\n                    if (JSON.parse(localStorage.getItem(\"isReset\")) == true) {\r\n                        navigate(\"/\");\r\n                    } else {\r\n                        navigate(Routes.MEMBER_PLAN);\r\n                    }\r\n                } else {\r\n                    if (JSON.parse(localStorage.getItem(\"isReset\")) == false) {\r\n                        navigate(-1);\r\n                    } else {\r\n                        navigate(\"/\");\r\n                    }\r\n                }\r\n            }\r\n            if (user.remember_me) {\r\n                localStorage.setItem(\r\n                    \"currentMember\",\r\n                    btoa(JSON.stringify(user))\r\n                );\r\n            } else {\r\n                if (getLocalStorageDataByEncryptKey(\"currentMember\")) {\r\n                    localStorage.removeItem(\"currentMember\");\r\n                }\r\n            }\r\n            localStorage.setItem(Tokens.MEMBER, response.data.data.token);\r\n            localStorage.removeItem(loggedConstant.IS_MEMBER_LOGOUT);\r\n            dispatch(\r\n                setUserProfile(LocalStorageKey.MEMBER, response.data.data.user)\r\n            );\r\n            dispatch({\r\n                type: authActionType.LOGIN,\r\n                payload: response.data.data,\r\n            });\r\n            // dispatch(\r\n            //     addToast({\r\n            //         text: getFormattedMessage(\"login.success.logged.message\"),\r\n            //     })\r\n            // );\r\n            localStorage.setItem(\"isReset\", false);\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n            }\r\n        });\r\n};\r\n\r\nexport const forgotPassword = (user) => async (dispatch) => {\r\n    await apiConfigWithRoot\r\n        .post(apiBaseURL.MEMBER_FORGOT_PASSWORD, user)\r\n        .then((response) => {\r\n            if (response) {\r\n                dispatch({\r\n                    type: authActionType.FORGOT_PASSWORD,\r\n                    payload: true,\r\n                });\r\n                dispatch(\r\n                    addToast({\r\n                        text: getFormattedMessage(\r\n                            \"forgot-password.success.message\"\r\n                        ),\r\n                    })\r\n                );\r\n            }\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n            }\r\n        });\r\n};\r\n\r\nexport const resetPassword = (user, navigate) => async (dispatch) => {\r\n    await apiConfigWithRoot\r\n        .post(apiBaseURL.MEMBER_RESET_PASSWORD, user)\r\n        .then((response) => {\r\n            if (response) {\r\n                localStorage.setItem(\"isReset\", true);\r\n                dispatch({\r\n                    type: authActionType.RESET_PASSWORD,\r\n                    payload: user,\r\n                });\r\n                dispatch(\r\n                    addToast({\r\n                        text: getFormattedMessage(\r\n                            \"reset-password.success.message\"\r\n                        ),\r\n                    })\r\n                );\r\n            }\r\n            navigate(Routes.MEMBER_LOGIN);\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                // console.log({ response });\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * This method used for register a member\r\n * @param user\r\n * @param navigate\r\n * @returns {Function}\r\n */\r\nexport const registration = (user, navigate) => async (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    const { email, password, first_name, last_name, phone } = user;\r\n    await apiConfig\r\n        .post(apiBaseURL.MEMBER_REGISTRATION, {\r\n            email,\r\n            password,\r\n            first_name,\r\n            last_name,\r\n            phone,\r\n        })\r\n        .then((response) => {\r\n            if (response) {\r\n                navigate(Routes.MEMBER_LOGIN);\r\n                dispatch({\r\n                    type: authActionType.REGISTRATION,\r\n                    payload: response.data.data,\r\n                });\r\n                dispatch(\r\n                    addToast({\r\n                        text: getFormattedMessage(\r\n                            \"registration.success.message\"\r\n                        ),\r\n                    })\r\n                );\r\n                dispatch(setLoading(false));\r\n            }\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n                dispatch(setLoading(false));\r\n            }\r\n        });\r\n};\r\n"],"names":["MemberForgotPassword","props","handleSubmit","invalid","isSubmitted","forgotPassword","className","title","md","xs","getFormattedMessage","to","Routes","color","onSubmit","formValues","url","environment","name","type","placeholder","groupText","component","CustomInputGroup","disabled","propTypes","PropTypes","form","reduxForm","validate","loginFormValidate","connect","state","auth","errors","email","test","password","length","confirm_password","wampServer","axiosApi","axios","baseURL","axiosInterceptor","i","login","user","navigate","dispatch","localStorage","setItem","apiConfig","apiBaseURL","then","response","data","membership_plan_name","JSON","parse","getItem","remember_me","btoa","stringify","getLocalStorageDataByEncryptKey","removeItem","Tokens","token","loggedConstant","setUserProfile","LocalStorageKey","authActionType","payload","addToast","text","message","toastType","apiConfigWithRoot","resetPassword","registration","setLoading","first_name","last_name","phone"],"sourceRoot":""}
{"version":3,"file":"js/chunks/104.js","mappings":"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","sources":["webpack:///./resources/pos/src/member/components/auth/registration/Registration.js","webpack:///./resources/pos/src/member/components/auth/registration/registrationFormValidate.js","webpack:///./resources/pos/src/member/config/apiConfigWithoutToken.js","webpack:///./resources/pos/src/member/store/actions/authAction.js"],"sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Card, CardBody, Col, Container, Form, Row } from \"reactstrap\";\r\nimport registrationFormValidate from \"./registrationFormValidate\";\r\nimport CustomInputGroup from \"../../../../shared/components/CustomInputGroup\";\r\nimport HeaderTitle from \"../../../../shared/header-title/HeaderTitle\";\r\nimport {\r\n    getCurrentMember,\r\n    getFormattedMessage,\r\n} from \"../../../../shared/sharedMethod\";\r\nimport { registration } from \"../../../store/actions/authAction\";\r\nimport { Routes } from \"../../../constants/index\";\r\nimport ProgressBar from \"../../../../shared/progress-bar/ProgressBar\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Header from \"../../../../components/newMemberApp/Header\";\r\nimport Footer from \"../../../../components/newMemberApp/Footer\";\r\n\r\nconst MemberRegistration = (props) => {\r\n    const { handleSubmit, invalid, history, registration } = props;\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const onRegistration = async (formValues) => {\r\n        registration(formValues, navigate);\r\n    };\r\n\r\n    // console.log(invalid);\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"mt-5 flex-row align-items-center login-form \">\r\n                <HeaderTitle title=\"Registration\" />\r\n                <ProgressBar />\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md=\"6\" xs=\"12\">\r\n                            <Card className=\"p-3\">\r\n                                <CardBody>\r\n                                    <Form\r\n                                        onSubmit={handleSubmit(onRegistration)}\r\n                                    >\r\n                                        <h2>\r\n                                            {getFormattedMessage(\r\n                                                \"registration.title\"\r\n                                            )}\r\n                                        </h2>\r\n                                        <p>\r\n                                            {getFormattedMessage(\r\n                                                \"registration.note\"\r\n                                            )}\r\n                                        </p>\r\n                                        {/* <label>\r\n                                            First Name\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </label> */}\r\n                                        <span className=\"text-danger\">*</span>\r\n                                        <Field\r\n                                            name=\"first_name\"\r\n                                            type=\"text\"\r\n                                            placeholder=\"registration.input.first-name.label\"\r\n                                            required\r\n                                            groupText=\"icon-user\"\r\n                                            component={CustomInputGroup}\r\n                                        />\r\n                                        {/* <label>\r\n                                            Last Name\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </label> */}\r\n                                        <span className=\"text-danger\">*</span>\r\n                                        <Field\r\n                                            name=\"last_name\"\r\n                                            type=\"text\"\r\n                                            placeholder=\"registration.input.last-name.label\"\r\n                                            required\r\n                                            groupText=\"icon-user\"\r\n                                            component={CustomInputGroup}\r\n                                        />\r\n                                        {/* <label>\r\n                                            Email\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </label> */}\r\n                                        <span className=\"text-danger\">*</span>\r\n                                        <Field\r\n                                            name=\"email\"\r\n                                            type=\"email\"\r\n                                            placeholder=\"registration.input.email.label\"\r\n                                            groupText=\"icon-envelope\"\r\n                                            component={CustomInputGroup}\r\n                                        />\r\n                                        <span className=\"text-danger\">*</span>\r\n                                        <Field\r\n                                            name=\"phone\"\r\n                                            type=\"number\"\r\n                                            placeholder=\"registration.input.phone.label\"\r\n                                            groupText=\"icon-phone\"\r\n                                            maxLength={10}\r\n                                            component={CustomInputGroup}\r\n                                        />\r\n                                        {/* <label>\r\n                                            Password\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </label> */}\r\n                                        <span className=\"text-danger\">*</span>\r\n                                        <Field\r\n                                            name=\"password\"\r\n                                            type=\"password\"\r\n                                            placeholder=\"registration.input.password.label\"\r\n                                            groupText=\"icon-lock\"\r\n                                            component={CustomInputGroup}\r\n                                        />\r\n                                        {/* <label>\r\n                                            Confirm Password\r\n                                            <span className=\"text-danger\">\r\n                                                *\r\n                                            </span>\r\n                                        </label> */}\r\n                                        <span className=\"text-danger\">*</span>\r\n                                        <Field\r\n                                            name=\"confirm_password\"\r\n                                            type=\"password\"\r\n                                            placeholder=\"registration.input.confirm-password.label\"\r\n                                            groupText=\"icon-lock\"\r\n                                            component={CustomInputGroup}\r\n                                        />\r\n                                        <div className=\"d-flex\">\r\n                                            <Button\r\n                                                color=\"frontend-btn\"\r\n                                                disabled={invalid}\r\n                                                className=\"frontend-btn\"\r\n                                            >\r\n                                                <span>\r\n                                                    {\" \"}\r\n                                                    {getFormattedMessage(\r\n                                                        \"registration.submit.title\"\r\n                                                    )}\r\n                                                </span>\r\n                                            </Button>\r\n                                        </div>\r\n                                        <div className=\"d-flex justify-content-center login_links\">\r\n                                            <Link\r\n                                                to={Routes.MEMBER_LOGIN}\r\n                                                color=\"link\"\r\n                                                className=\"px-0 mt-2 text-right text-decoration-none\"\r\n                                            >\r\n                                                {getFormattedMessage(\r\n                                                    \"registration.link.login.title\"\r\n                                                )}\r\n                                            </Link>\r\n                                        </div>\r\n                                    </Form>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    );\r\n};\r\n\r\nMemberRegistration.propTypes = {\r\n    history: PropTypes.object,\r\n    invalid: PropTypes.bool,\r\n    registration: PropTypes.func,\r\n    handleSubmit: PropTypes.func,\r\n    onRegistration: PropTypes.func,\r\n};\r\n\r\nconst form = reduxForm({\r\n    form: \"registrationForm\",\r\n    validate: registrationFormValidate,\r\n})(MemberRegistration);\r\n\r\nexport default connect(null, { registration })(form);\r\n","import { getFormattedMessage } from \"../../../../shared/sharedMethod\";\r\n\r\nexport default (formValues) => {\r\n    const errors = {};\r\n    console.log({ formValues });\r\n    if (!formValues.first_name) {\r\n        errors.first_name = getFormattedMessage(\r\n            \"registration.input.first-name.validate.label\"\r\n        );\r\n    }\r\n    if (!formValues.last_name) {\r\n        errors.last_name = getFormattedMessage(\r\n            \"registration.input.last-name.validate.label\"\r\n        );\r\n    }\r\n    if (!formValues.email) {\r\n        errors.email = getFormattedMessage(\r\n            \"registration.input.email-required.validate.label\"\r\n        );\r\n    } else if (\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{1,9}$/i.test(formValues.email)\r\n    ) {\r\n        errors.email = \"Please Enter valid email address.\";\r\n    }\r\n    if (!formValues.password) {\r\n        errors.password = getFormattedMessage(\r\n            \"registration.input.password-required.validate.label\"\r\n        );\r\n    } else if (/\\s/g.test(formValues.password)) {\r\n        errors.password = getFormattedMessage(\r\n            \"registration.input.password-required.validate.label\"\r\n        );\r\n    }\r\n    if (formValues.password && formValues.password.length < 8) {\r\n        errors.password = getFormattedMessage(\r\n            \"registration.input.password-invalid.validate.label\"\r\n        );\r\n    }\r\n    if (formValues.confirm_password !== formValues.password) {\r\n        errors.confirm_password = getFormattedMessage(\r\n            \"registration.input.confirm-password.validate.label\"\r\n        );\r\n    }\r\n    if (formValues.phone) {\r\n        if (formValues.phone.length < 10 || formValues.phone.length > 10) {\r\n            errors.phone = \"Phone number should be atleast 10 characters.\";\r\n        }\r\n    }\r\n    return errors;\r\n};\r\n","import axios from \"axios\";\r\nimport axiosInterceptor from \"./axiosInterceptor\";\r\nimport { environment } from \"../../environment\";\r\n\r\nconst wampServer = environment.URL + \"/api\";\r\n\r\n\r\nconst axiosApi = axios.create({\r\n    baseURL: wampServer,\r\n});\r\naxiosInterceptor.setupInterceptors(axiosApi, true, false);\r\nexport default axiosApi;\r\n","import { authActionType, toastType } from \"../../constants/index\";\r\nimport apiConfig from \"../../config/apiConfigWithoutToken\";\r\nimport apiConfigWithRoot from \"../../config/apiConfigwithoutTokenWithRoot\";\r\nimport { addToast } from \"../../../store/action/toastAction\";\r\nimport { getFormattedMessage } from \"../../../shared/sharedMethod\";\r\nimport {\r\n    apiBaseURL,\r\n    LocalStorageKey,\r\n    loggedConstant,\r\n    Routes,\r\n    Tokens,\r\n} from \"../../constants/index\";\r\nimport { setUserProfile } from \"../../../store/action/localStorageAction\";\r\nimport { getLocalStorageDataByEncryptKey } from \"../../../shared/sharedMethod\";\r\nimport { setLoading } from \"../../../store/action/progressBarAction\";\r\n\r\nexport const login = (user, navigate) => async (dispatch) => {\r\n    localStorage.setItem(\"isMemberLogout\", false);\r\n    const { email, password } = user;\r\n    await apiConfig\r\n        .post(apiBaseURL.MEMBER_LOGIN, { email, password })\r\n        .then((response) => {\r\n            if (response) {\r\n                // console.log(localStorage.getItem(\"isReset\"));\r\n                if (!response.data.data.user.membership_plan_name) {\r\n                    if (JSON.parse(localStorage.getItem(\"isReset\")) == true) {\r\n                        navigate(\"/\");\r\n                    } else {\r\n                        navigate(Routes.MEMBER_PLAN);\r\n                    }\r\n                } else {\r\n                    if (JSON.parse(localStorage.getItem(\"isReset\")) == false) {\r\n                        navigate(-1);\r\n                    } else {\r\n                        navigate(\"/\");\r\n                    }\r\n                }\r\n            }\r\n            if (user.remember_me) {\r\n                localStorage.setItem(\r\n                    \"currentMember\",\r\n                    btoa(JSON.stringify(user))\r\n                );\r\n            } else {\r\n                if (getLocalStorageDataByEncryptKey(\"currentMember\")) {\r\n                    localStorage.removeItem(\"currentMember\");\r\n                }\r\n            }\r\n            localStorage.setItem(Tokens.MEMBER, response.data.data.token);\r\n            localStorage.removeItem(loggedConstant.IS_MEMBER_LOGOUT);\r\n            dispatch(\r\n                setUserProfile(LocalStorageKey.MEMBER, response.data.data.user)\r\n            );\r\n            dispatch({\r\n                type: authActionType.LOGIN,\r\n                payload: response.data.data,\r\n            });\r\n            // dispatch(\r\n            //     addToast({\r\n            //         text: getFormattedMessage(\"login.success.logged.message\"),\r\n            //     })\r\n            // );\r\n            localStorage.setItem(\"isReset\", false);\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n            }\r\n        });\r\n};\r\n\r\nexport const forgotPassword = (user) => async (dispatch) => {\r\n    await apiConfigWithRoot\r\n        .post(apiBaseURL.MEMBER_FORGOT_PASSWORD, user)\r\n        .then((response) => {\r\n            if (response) {\r\n                dispatch({\r\n                    type: authActionType.FORGOT_PASSWORD,\r\n                    payload: true,\r\n                });\r\n                dispatch(\r\n                    addToast({\r\n                        text: getFormattedMessage(\r\n                            \"forgot-password.success.message\"\r\n                        ),\r\n                    })\r\n                );\r\n            }\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n            }\r\n        });\r\n};\r\n\r\nexport const resetPassword = (user, navigate) => async (dispatch) => {\r\n    await apiConfigWithRoot\r\n        .post(apiBaseURL.MEMBER_RESET_PASSWORD, user)\r\n        .then((response) => {\r\n            if (response) {\r\n                localStorage.setItem(\"isReset\", true);\r\n                dispatch({\r\n                    type: authActionType.RESET_PASSWORD,\r\n                    payload: user,\r\n                });\r\n                dispatch(\r\n                    addToast({\r\n                        text: getFormattedMessage(\r\n                            \"reset-password.success.message\"\r\n                        ),\r\n                    })\r\n                );\r\n            }\r\n            navigate(Routes.MEMBER_LOGIN);\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                // console.log({ response });\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * This method used for register a member\r\n * @param user\r\n * @param navigate\r\n * @returns {Function}\r\n */\r\nexport const registration = (user, navigate) => async (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    const { email, password, first_name, last_name, phone } = user;\r\n    await apiConfig\r\n        .post(apiBaseURL.MEMBER_REGISTRATION, {\r\n            email,\r\n            password,\r\n            first_name,\r\n            last_name,\r\n            phone,\r\n        })\r\n        .then((response) => {\r\n            if (response) {\r\n                navigate(Routes.MEMBER_LOGIN);\r\n                dispatch({\r\n                    type: authActionType.REGISTRATION,\r\n                    payload: response.data.data,\r\n                });\r\n                dispatch(\r\n                    addToast({\r\n                        text: getFormattedMessage(\r\n                            \"registration.success.message\"\r\n                        ),\r\n                    })\r\n                );\r\n                dispatch(setLoading(false));\r\n            }\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n                dispatch(setLoading(false));\r\n            }\r\n        });\r\n};\r\n"],"names":["i","MemberRegistration","props","handleSubmit","invalid","registration","history","navigate","useNavigate","onRegistration","formValues","Header","className","HeaderTitle","title","ProgressBar","Container","Row","Col","md","xs","Card","CardBody","Form","onSubmit","getFormattedMessage","Field","name","type","placeholder","required","groupText","component","CustomInputGroup","maxLength","Button","color","disabled","to","Routes","Footer","propTypes","PropTypes","form","reduxForm","validate","errors","console","log","first_name","last_name","email","test","password","length","confirm_password","phone","connect","wampServer","environment","axiosApi","axios","baseURL","axiosInterceptor","login","user","dispatch","localStorage","setItem","apiConfig","apiBaseURL","then","response","data","membership_plan_name","JSON","parse","getItem","remember_me","btoa","stringify","getLocalStorageDataByEncryptKey","removeItem","Tokens","token","loggedConstant","setUserProfile","LocalStorageKey","authActionType","payload","addToast","text","message","toastType","forgotPassword","apiConfigWithRoot","resetPassword","setLoading"],"sourceRoot":""}
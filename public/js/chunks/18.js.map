{"version":3,"file":"js/chunks/18.js","mappings":"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","sources":["webpack:///./resources/pos/src/shared/components/CheckBox.js","webpack:///./resources/pos/src/member/components/auth/Login.js","webpack:///./resources/pos/src/member/components/auth/loginFormValidate.js","webpack:///./resources/pos/src/member/config/apiConfigWithoutToken.js","webpack:///./resources/pos/src/member/store/actions/authAction.js"],"sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Component.scss';\r\n\r\nconst CheckBox = (props) => {\r\n    const { input, label } = props;\r\n\r\n    return (\r\n        <label className=\"control control--checkbox\">{label}\r\n            <input type=\"checkbox\" checked={!!input.value}\r\n                   onChange={(e, { checked }) => input.onChange(checked)} {...input}/>\r\n            <div className=\"control__indicator\"/>\r\n        </label>\r\n    );\r\n};\r\n\r\nCheckBox.propTypes = {\r\n    input: PropTypes.object,\r\n    label: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.object,\r\n    ])\r\n};\r\n\r\nexport default CheckBox;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Card, CardBody, Col, Container, Form, Row } from \"reactstrap\";\r\nimport loginFormValidate from \"./loginFormValidate\";\r\nimport { Routes, Tokens } from \"../../constants/index\";\r\nimport CheckBox from \"../../../shared/components/CheckBox\";\r\nimport CustomInputGroup from \"../../../shared/components/CustomInputGroup\";\r\nimport HeaderTitle from \"../../../shared/header-title/HeaderTitle\";\r\nimport {\r\n    getCurrentMember,\r\n    getFormattedMessage,\r\n    getLocalStorageDataByEncryptKey,\r\n    getLocalStorageDataByKey,\r\n} from \"../../../shared/sharedMethod\";\r\nimport { login } from \"../../store/actions/authAction\";\r\nimport { displayMessage } from \"../../../store/action/toastAction\";\r\n\r\nimport logo from \"../../../../../assets/img/elibrary.png\";\r\n\r\nimport Header from \"../../../components/newMemberApp/Header\";\r\nimport Footer from \"../../../components/newMemberApp/Footer\";\r\n\r\nconst MemberLogin = (props) => {\r\n    const {\r\n        handleSubmit,\r\n        invalid,\r\n        history,\r\n        initialize,\r\n        login,\r\n        displayMessage,\r\n    } = props;\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        if (getLocalStorageDataByKey(Tokens.MEMBER)) {\r\n            navigate(Routes.MEMBER_DEFAULT);\r\n        }\r\n        initialize(getLocalStorageDataByEncryptKey(\"currentMember\"));\r\n        const params = new URLSearchParams(window.location.search);\r\n        const msg = params.get(\"msg\");\r\n        const success = params.get(\"success\");\r\n        if (msg) {\r\n            displayMessage(msg, +success);\r\n        }\r\n    }, []);\r\n\r\n    const onLogin = (formValues) => {\r\n        login(formValues, navigate);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"flex-row align-items-center login-form\">\r\n                <Container>\r\n                    <HeaderTitle title=\"Login\" />\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md=\"6\" xs=\"12\">\r\n                            <Card className=\"p-3\">\r\n                                <CardBody>\r\n                                    <Form onSubmit={handleSubmit(onLogin)}>\r\n                                        <h2>\r\n                                            {getFormattedMessage(\"login.title\")}\r\n                                        </h2>\r\n                                        <p>\r\n                                            {getFormattedMessage(\"login.note\")}\r\n                                        </p>\r\n                                        <Field\r\n                                            name=\"email\"\r\n                                            type=\"email\"\r\n                                            placeholder=\"profile.input.email.label\"\r\n                                            groupText=\"icon-envelope\"\r\n                                            component={CustomInputGroup}\r\n                                        />\r\n                                        <Field\r\n                                            name=\"password\"\r\n                                            type=\"password\"\r\n                                            placeholder=\"profile.input.password.label\"\r\n                                            groupText=\"icon-lock\"\r\n                                            component={CustomInputGroup}\r\n                                        />\r\n                                        <div>\r\n                                            <Field\r\n                                                name=\"remember_me\"\r\n                                                label={getFormattedMessage(\r\n                                                    \"login.checkbox.remember.label\"\r\n                                                )}\r\n                                                component={CheckBox}\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"d-flex\">\r\n                                            <Button\r\n                                                color=\" \"\r\n                                                disabled={invalid}\r\n                                                className=\"frontend-btn\"\r\n                                            >\r\n                                                <span> {getFormattedMessage(\r\n                                                    \"login.title\"\r\n                                                )}</span>\r\n                                            </Button>\r\n                                        </div>\r\n                                        <div className=\"d-flex justify-content-between login_links\">\r\n                                            <Link\r\n                                                to={Routes.MEMBER_REGISTRATION}\r\n                                                color=\"link\"\r\n                                                className=\"px-0 mt-2 text-right\"\r\n                                            >\r\n                                                {getFormattedMessage(\r\n                                                    \"registration.register.link.title\"\r\n                                                )}\r\n                                            </Link>\r\n                                            <Link\r\n                                                to={\r\n                                                    Routes.MEMBER_FORGOT_PASSWORD\r\n                                                }\r\n                                                color=\"link\"\r\n                                                className=\"px-0 mt-2 text-right\"\r\n                                            >\r\n                                                {getFormattedMessage(\r\n                                                    \"login.link.forgot-password.title\"\r\n                                                )}\r\n                                            </Link>\r\n                                        </div>\r\n                                    </Form>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    );\r\n};\r\n\r\nMemberLogin.propTypes = {\r\n    location: PropTypes.object,\r\n    history: PropTypes.object,\r\n    invalid: PropTypes.bool,\r\n    initialize: PropTypes.func,\r\n    login: PropTypes.func,\r\n    displayMessage: PropTypes.func,\r\n    handleSubmit: PropTypes.func,\r\n};\r\n\r\nconst form = reduxForm({ form: \"loginForm\", validate: loginFormValidate })(\r\n    MemberLogin\r\n);\r\n\r\nexport default connect(null, { login, displayMessage })(form);\r\n","import { getFormattedMessage } from \"../../../shared/sharedMethod\";\r\n\r\nexport default (formValues) => {\r\n    const errors = {};\r\n    if (!formValues.email) {\r\n        errors.email = getFormattedMessage(\r\n            \"profile.input.email-required.validate.label\"\r\n        );\r\n    }\r\n    const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\r\n    if (!regex.test(formValues.email)) {\r\n        // errors.email = 'Invalid email address !'\r\n    }\r\n    if (!formValues.password) {\r\n        errors.password = getFormattedMessage(\r\n            \"profile.input.password-required.validate.label\"\r\n        );\r\n    }\r\n    if (formValues.password && formValues.password.length < 8) {\r\n        errors.password = getFormattedMessage(\r\n            \"profile.input.password-invalid.validate.label\"\r\n        );\r\n    }\r\n    if (formValues.confirm_password !== formValues.password) {\r\n        errors.confirm_password = getFormattedMessage(\r\n            \"profile.input.confirm-password.validate.label\"\r\n        );\r\n    }\r\n    return errors;\r\n};\r\n","import axios from \"axios\";\r\nimport axiosInterceptor from \"./axiosInterceptor\";\r\nimport { environment } from \"../../environment\";\r\n\r\nconst wampServer = environment.URL + \"/api\";\r\n\r\n\r\nconst axiosApi = axios.create({\r\n    baseURL: wampServer,\r\n});\r\naxiosInterceptor.setupInterceptors(axiosApi, true, false);\r\nexport default axiosApi;\r\n","import { authActionType, toastType } from \"../../constants/index\";\r\nimport apiConfig from \"../../config/apiConfigWithoutToken\";\r\nimport apiConfigWithRoot from \"../../config/apiConfigwithoutTokenWithRoot\";\r\nimport { addToast } from \"../../../store/action/toastAction\";\r\nimport { getFormattedMessage } from \"../../../shared/sharedMethod\";\r\nimport {\r\n    apiBaseURL,\r\n    LocalStorageKey,\r\n    loggedConstant,\r\n    Routes,\r\n    Tokens,\r\n} from \"../../constants/index\";\r\nimport { setUserProfile } from \"../../../store/action/localStorageAction\";\r\nimport { getLocalStorageDataByEncryptKey } from \"../../../shared/sharedMethod\";\r\nimport { setLoading } from \"../../../store/action/progressBarAction\";\r\n\r\nexport const login = (user, navigate) => async (dispatch) => {\r\n    localStorage.setItem(\"isMemberLogout\", false);\r\n    const { email, password } = user;\r\n    await apiConfig\r\n        .post(apiBaseURL.MEMBER_LOGIN, { email, password })\r\n        .then((response) => {\r\n            if (response) {\r\n                // console.log(localStorage.getItem(\"isReset\"));\r\n                if (!response.data.data.user.membership_plan_name) {\r\n                    if (JSON.parse(localStorage.getItem(\"isReset\")) == true) {\r\n                        navigate(\"/\");\r\n                    } else {\r\n                        navigate(Routes.MEMBER_PLAN);\r\n                    }\r\n                } else {\r\n                    if (JSON.parse(localStorage.getItem(\"isReset\")) == false) {\r\n                        navigate(-1);\r\n                    } else {\r\n                        navigate(\"/\");\r\n                    }\r\n                }\r\n            }\r\n            if (user.remember_me) {\r\n                localStorage.setItem(\r\n                    \"currentMember\",\r\n                    btoa(JSON.stringify(user))\r\n                );\r\n            } else {\r\n                if (getLocalStorageDataByEncryptKey(\"currentMember\")) {\r\n                    localStorage.removeItem(\"currentMember\");\r\n                }\r\n            }\r\n            localStorage.setItem(Tokens.MEMBER, response.data.data.token);\r\n            localStorage.removeItem(loggedConstant.IS_MEMBER_LOGOUT);\r\n            dispatch(\r\n                setUserProfile(LocalStorageKey.MEMBER, response.data.data.user)\r\n            );\r\n            dispatch({\r\n                type: authActionType.LOGIN,\r\n                payload: response.data.data,\r\n            });\r\n            // dispatch(\r\n            //     addToast({\r\n            //         text: getFormattedMessage(\"login.success.logged.message\"),\r\n            //     })\r\n            // );\r\n            localStorage.setItem(\"isReset\", false);\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n            }\r\n        });\r\n};\r\n\r\nexport const forgotPassword = (user) => async (dispatch) => {\r\n    await apiConfigWithRoot\r\n        .post(apiBaseURL.MEMBER_FORGOT_PASSWORD, user)\r\n        .then((response) => {\r\n            if (response) {\r\n                dispatch({\r\n                    type: authActionType.FORGOT_PASSWORD,\r\n                    payload: true,\r\n                });\r\n                dispatch(\r\n                    addToast({\r\n                        text: getFormattedMessage(\r\n                            \"forgot-password.success.message\"\r\n                        ),\r\n                    })\r\n                );\r\n            }\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n            }\r\n        });\r\n};\r\n\r\nexport const resetPassword = (user, navigate) => async (dispatch) => {\r\n    await apiConfigWithRoot\r\n        .post(apiBaseURL.MEMBER_RESET_PASSWORD, user)\r\n        .then((response) => {\r\n            if (response) {\r\n                localStorage.setItem(\"isReset\", true);\r\n                dispatch({\r\n                    type: authActionType.RESET_PASSWORD,\r\n                    payload: user,\r\n                });\r\n                dispatch(\r\n                    addToast({\r\n                        text: getFormattedMessage(\r\n                            \"reset-password.success.message\"\r\n                        ),\r\n                    })\r\n                );\r\n            }\r\n            navigate(Routes.MEMBER_LOGIN);\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                // console.log({ response });\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * This method used for register a member\r\n * @param user\r\n * @param navigate\r\n * @returns {Function}\r\n */\r\nexport const registration = (user, navigate) => async (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    const { email, password, first_name, last_name, phone } = user;\r\n    await apiConfig\r\n        .post(apiBaseURL.MEMBER_REGISTRATION, {\r\n            email,\r\n            password,\r\n            first_name,\r\n            last_name,\r\n            phone,\r\n        })\r\n        .then((response) => {\r\n            if (response) {\r\n                navigate(Routes.MEMBER_LOGIN);\r\n                dispatch({\r\n                    type: authActionType.REGISTRATION,\r\n                    payload: response.data.data,\r\n                });\r\n                dispatch(\r\n                    addToast({\r\n                        text: getFormattedMessage(\r\n                            \"registration.success.message\"\r\n                        ),\r\n                    })\r\n                );\r\n                dispatch(setLoading(false));\r\n            }\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n                dispatch(setLoading(false));\r\n            }\r\n        });\r\n};\r\n"],"names":["CheckBox","props","input","label","className","type","checked","value","onChange","e","propTypes","PropTypes","MemberLogin","handleSubmit","invalid","initialize","history","login","displayMessage","navigate","useNavigate","useEffect","getLocalStorageDataByKey","Tokens","Routes","getLocalStorageDataByEncryptKey","params","URLSearchParams","window","location","search","msg","get","success","Header","Container","HeaderTitle","title","Row","Col","md","xs","Card","CardBody","Form","onSubmit","formValues","getFormattedMessage","Field","name","placeholder","groupText","component","CustomInputGroup","Button","color","disabled","to","Footer","form","reduxForm","validate","loginFormValidate","connect","errors","email","test","password","length","confirm_password","wampServer","environment","axiosApi","axios","baseURL","axiosInterceptor","i","user","dispatch","localStorage","setItem","apiConfig","apiBaseURL","then","response","data","membership_plan_name","JSON","parse","getItem","remember_me","btoa","stringify","removeItem","token","loggedConstant","setUserProfile","LocalStorageKey","authActionType","payload","addToast","text","message","toastType","forgotPassword","apiConfigWithRoot","resetPassword","registration","setLoading","first_name","last_name","phone"],"sourceRoot":""}
{"version":3,"file":"js/chunks/265.js","mappings":"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","sources":["webpack:///./resources/pos/src/member/components/auth/ResetPassword.js","webpack:///./resources/pos/src/member/components/auth/loginFormValidate.js","webpack:///./resources/pos/src/member/config/apiConfigWithoutToken.js","webpack:///./resources/pos/src/member/store/actions/authAction.js"],"sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Card, CardBody, Col, Container, Form, Row } from \"reactstrap\";\r\nimport loginFormValidate from \"./loginFormValidate\";\r\nimport { Routes } from \"../../../constants\";\r\nimport HeaderTitle from \"../../../shared/header-title/HeaderTitle\";\r\nimport CustomInputGroup from \"../../../shared/components/CustomInputGroup\";\r\nimport {\r\n    getCurrentMember,\r\n    getFormattedMessage,\r\n} from \"../../../shared/sharedMethod\";\r\nimport { resetPassword } from \"../../store/actions/authAction\";\r\nimport Header from \"../../../components/newMemberApp/Header\";\r\nimport Footer from \"../../../components/newMemberApp/Footer\";\r\n\r\nconst MemberResetPassword = (props) => {\r\n    const { handleSubmit, invalid, history, resetPassword } = props;\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const params = new URLSearchParams(location.search);\r\n    const onSubmit = (formValues) => {\r\n        delete formValues.confirm_password;\r\n        formValues.token = params.get(\"token\");\r\n        resetPassword(formValues, navigate);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"c-app flex-row align-items-center login-form\">\r\n                <HeaderTitle title=\"Reset Password\" />\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md=\"6\" xs=\"12\">\r\n                            <Card className=\"p-3\">\r\n                                <CardBody>\r\n                                    <Form onSubmit={handleSubmit(onSubmit)}>\r\n                                        <h2>\r\n                                            {getFormattedMessage(\r\n                                                \"reset-password.title\"\r\n                                            )}\r\n                                        </h2>\r\n                                        <p className=\"text-muted\">\r\n                                            {getFormattedMessage(\r\n                                                \"reset-password.note\"\r\n                                            )}\r\n                                        </p>\r\n                                        <Field\r\n                                            name=\"password\"\r\n                                            type=\"password\"\r\n                                            placeholder=\"profile.input.password.label\"\r\n                                            groupText=\"icon-lock\"\r\n                                            component={CustomInputGroup}\r\n                                        />\r\n                                        <Field\r\n                                            name=\"confirm_password\"\r\n                                            type=\"password\"\r\n                                            placeholder=\"profile.input.confirm-password.label\"\r\n                                            groupText=\"icon-lock\"\r\n                                            component={CustomInputGroup}\r\n                                        />\r\n                                        <Row>\r\n                                            <Col className=\"mt-2 d-flex justify-content-center\">\r\n                                                <Button\r\n                                                    color=\"primary\"\r\n                                                    disabled={invalid}\r\n                                                    className=\"px-4\"\r\n                                                >\r\n                                                    {getFormattedMessage(\r\n                                                        \"global.input.reset-btn.label\"\r\n                                                    )}\r\n                                                </Button>\r\n                                                <Link\r\n                                                    to={\"#/lms/login\"}\r\n                                                    className=\"btn btn-secondary ml-2\"\r\n                                                >\r\n                                                    {getFormattedMessage(\r\n                                                        \"global.input.back-btn.label\"\r\n                                                    )}\r\n                                                </Link>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Form>\r\n                                </CardBody>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n            <Footer />\r\n        </>\r\n    );\r\n};\r\n\r\nMemberResetPassword.propTypes = {\r\n    location: PropTypes.object,\r\n    history: PropTypes.object,\r\n    invalid: PropTypes.bool,\r\n    resetPassword: PropTypes.func,\r\n    handleSubmit: PropTypes.func,\r\n};\r\n\r\nconst form = reduxForm({\r\n    form: \"resetPasswordForm\",\r\n    validate: loginFormValidate,\r\n})(MemberResetPassword);\r\n\r\nexport default connect(null, { resetPassword })(form);\r\n","import { getFormattedMessage } from \"../../../shared/sharedMethod\";\r\n\r\nexport default (formValues) => {\r\n    const errors = {};\r\n    if (!formValues.email) {\r\n        errors.email = getFormattedMessage(\r\n            \"profile.input.email-required.validate.label\"\r\n        );\r\n    }\r\n    const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\r\n    if (!regex.test(formValues.email)) {\r\n        // errors.email = 'Invalid email address !'\r\n    }\r\n    if (!formValues.password) {\r\n        errors.password = getFormattedMessage(\r\n            \"profile.input.password-required.validate.label\"\r\n        );\r\n    }\r\n    if (formValues.password && formValues.password.length < 8) {\r\n        errors.password = getFormattedMessage(\r\n            \"profile.input.password-invalid.validate.label\"\r\n        );\r\n    }\r\n    if (formValues.confirm_password !== formValues.password) {\r\n        errors.confirm_password = getFormattedMessage(\r\n            \"profile.input.confirm-password.validate.label\"\r\n        );\r\n    }\r\n    return errors;\r\n};\r\n","import axios from \"axios\";\r\nimport axiosInterceptor from \"./axiosInterceptor\";\r\nimport { environment } from \"../../environment\";\r\n\r\nconst wampServer = environment.URL + \"/api\";\r\n\r\n\r\nconst axiosApi = axios.create({\r\n    baseURL: wampServer,\r\n});\r\naxiosInterceptor.setupInterceptors(axiosApi, true, false);\r\nexport default axiosApi;\r\n","import { authActionType, toastType } from \"../../constants/index\";\r\nimport apiConfig from \"../../config/apiConfigWithoutToken\";\r\nimport apiConfigWithRoot from \"../../config/apiConfigwithoutTokenWithRoot\";\r\nimport { addToast } from \"../../../store/action/toastAction\";\r\nimport { getFormattedMessage } from \"../../../shared/sharedMethod\";\r\nimport {\r\n    apiBaseURL,\r\n    LocalStorageKey,\r\n    loggedConstant,\r\n    Routes,\r\n    Tokens,\r\n} from \"../../constants/index\";\r\nimport { setUserProfile } from \"../../../store/action/localStorageAction\";\r\nimport { getLocalStorageDataByEncryptKey } from \"../../../shared/sharedMethod\";\r\nimport { setLoading } from \"../../../store/action/progressBarAction\";\r\n\r\nexport const login = (user, navigate) => async (dispatch) => {\r\n    localStorage.setItem(\"isMemberLogout\", false);\r\n    const { email, password } = user;\r\n    await apiConfig\r\n        .post(apiBaseURL.MEMBER_LOGIN, { email, password })\r\n        .then((response) => {\r\n            if (response) {\r\n                // console.log(localStorage.getItem(\"isReset\"));\r\n                if (!response.data.data.user.membership_plan_name) {\r\n                    if (JSON.parse(localStorage.getItem(\"isReset\")) == true) {\r\n                        navigate(\"/\");\r\n                    } else {\r\n                        navigate(Routes.MEMBER_PLAN);\r\n                    }\r\n                } else {\r\n                    if (JSON.parse(localStorage.getItem(\"isReset\")) == false) {\r\n                        navigate(-1);\r\n                    } else {\r\n                        navigate(\"/\");\r\n                    }\r\n                }\r\n            }\r\n            if (user.remember_me) {\r\n                localStorage.setItem(\r\n                    \"currentMember\",\r\n                    btoa(JSON.stringify(user))\r\n                );\r\n            } else {\r\n                if (getLocalStorageDataByEncryptKey(\"currentMember\")) {\r\n                    localStorage.removeItem(\"currentMember\");\r\n                }\r\n            }\r\n            localStorage.setItem(Tokens.MEMBER, response.data.data.token);\r\n            localStorage.removeItem(loggedConstant.IS_MEMBER_LOGOUT);\r\n            dispatch(\r\n                setUserProfile(LocalStorageKey.MEMBER, response.data.data.user)\r\n            );\r\n            dispatch({\r\n                type: authActionType.LOGIN,\r\n                payload: response.data.data,\r\n            });\r\n            // dispatch(\r\n            //     addToast({\r\n            //         text: getFormattedMessage(\"login.success.logged.message\"),\r\n            //     })\r\n            // );\r\n            localStorage.setItem(\"isReset\", false);\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n            }\r\n        });\r\n};\r\n\r\nexport const forgotPassword = (user) => async (dispatch) => {\r\n    await apiConfigWithRoot\r\n        .post(apiBaseURL.MEMBER_FORGOT_PASSWORD, user)\r\n        .then((response) => {\r\n            if (response) {\r\n                dispatch({\r\n                    type: authActionType.FORGOT_PASSWORD,\r\n                    payload: true,\r\n                });\r\n                dispatch(\r\n                    addToast({\r\n                        text: getFormattedMessage(\r\n                            \"forgot-password.success.message\"\r\n                        ),\r\n                    })\r\n                );\r\n            }\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n            }\r\n        });\r\n};\r\n\r\nexport const resetPassword = (user, navigate) => async (dispatch) => {\r\n    await apiConfigWithRoot\r\n        .post(apiBaseURL.MEMBER_RESET_PASSWORD, user)\r\n        .then((response) => {\r\n            if (response) {\r\n                localStorage.setItem(\"isReset\", true);\r\n                dispatch({\r\n                    type: authActionType.RESET_PASSWORD,\r\n                    payload: user,\r\n                });\r\n                dispatch(\r\n                    addToast({\r\n                        text: getFormattedMessage(\r\n                            \"reset-password.success.message\"\r\n                        ),\r\n                    })\r\n                );\r\n            }\r\n            navigate(Routes.MEMBER_LOGIN);\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                // console.log({ response });\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n            }\r\n        });\r\n};\r\n\r\n/**\r\n * This method used for register a member\r\n * @param user\r\n * @param navigate\r\n * @returns {Function}\r\n */\r\nexport const registration = (user, navigate) => async (dispatch) => {\r\n    dispatch(setLoading(true));\r\n    const { email, password, first_name, last_name, phone } = user;\r\n    await apiConfig\r\n        .post(apiBaseURL.MEMBER_REGISTRATION, {\r\n            email,\r\n            password,\r\n            first_name,\r\n            last_name,\r\n            phone,\r\n        })\r\n        .then((response) => {\r\n            if (response) {\r\n                navigate(Routes.MEMBER_LOGIN);\r\n                dispatch({\r\n                    type: authActionType.REGISTRATION,\r\n                    payload: response.data.data,\r\n                });\r\n                dispatch(\r\n                    addToast({\r\n                        text: getFormattedMessage(\r\n                            \"registration.success.message\"\r\n                        ),\r\n                    })\r\n                );\r\n                dispatch(setLoading(false));\r\n            }\r\n        })\r\n        .catch(({ response }) => {\r\n            if (response) {\r\n                dispatch(\r\n                    addToast({\r\n                        text: response.data.message,\r\n                        type: toastType.ERROR,\r\n                    })\r\n                );\r\n                dispatch(setLoading(false));\r\n            }\r\n        });\r\n};\r\n"],"names":["MemberResetPassword","props","handleSubmit","invalid","resetPassword","history","location","useLocation","navigate","useNavigate","params","URLSearchParams","search","className","title","md","xs","onSubmit","formValues","confirm_password","token","get","getFormattedMessage","name","type","placeholder","groupText","component","CustomInputGroup","color","disabled","to","propTypes","PropTypes","form","reduxForm","validate","loginFormValidate","connect","errors","email","test","password","length","wampServer","environment","axiosApi","axios","baseURL","axiosInterceptor","i","login","user","dispatch","localStorage","setItem","apiConfig","apiBaseURL","then","response","data","membership_plan_name","JSON","parse","getItem","Routes","remember_me","btoa","stringify","getLocalStorageDataByEncryptKey","removeItem","Tokens","loggedConstant","setUserProfile","LocalStorageKey","authActionType","payload","addToast","text","message","toastType","forgotPassword","apiConfigWithRoot","registration","setLoading","first_name","last_name","phone"],"sourceRoot":""}